import logging

#import states as states
from aiogram import Bot, Dispatcher, executor, types
import bs4
import requests
import sqlite3
import asyncio
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from main import STATES, checkAccess
from aiogram.dispatcher.filters import Text

class TestStates(Helper):
    mode = HelperMode.snake_case
    S_ENTER_LOGIN = ListItem()
    S_ENTER_PASS =  ListItem()
    S_GET_INFO =  ListItem()
    S_DEFAULT = ListItem()

class BotDB:

    def _init_(self, db_file,tg_id, state):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–¥"""
        self.conn=sqlite3.connect(db_file)
        self.cursor = self.conn.cursor()
        self.cursor.execute("CREATE TABLE IF NOT EXISTS 'user_states' ('tg_id' TEXT, 'states' INTEGER)",(tg_id, state,)),


    def get_user_id(self, tg_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–≥ –∞–π–¥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        tg_id = bot.get_me(self)
        self.cursor.execute("INSERT INTO 'users_states' ('tg_id') VALUES ('tg_id')", (tg_id,))
        result = self.cursor.execute("SELECT 'states' FROM 'users_states' WHERE 'tg_id' = ?", (tg_id,))
        return self.conn.commit()

    def get_user_state(self, states):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ6–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute("INSERT INTO 'users_states' ('states') VALUES (?)", (states,))
        return self.conn.commit()

    def add_record(self, tg_id, states):
        """–ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å–æ—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–≥ –∞–π–¥–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∏—á–µ–≥–æ"""
        self.cursor.execute("INSERT INTO 'user_states' ('tg_id','states' ) VALUES (?,?)",(tg_id,states,))
        return self.conn.commit()

    def get_records(self,tg_id,states):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î-–ø–æ–ª—É—á–∞–µ—Ç –Ω–∏—á–µ–≥–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏"""
        result = self.cursor.execute("SELECT tg_id, states FROM user_states;"),
        self.get_user_id(tg_id,states),
        return result.fetcall()

    def update_record(self, tg_id, states):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–≥ –∞–π–¥–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∏—á–µ–≥–æ"""
        tg_id = bot.get_me(self)
        self.cursor.execute("INSERT INTO 'users_states' ('tg_id') VALUES ('tg_id')", (tg_id,))
        self.cursor.execute("INSERT INTO 'user_states' ('states') VALUES ('states')",(states,))
        self.cursor.execute("UPDATE 'user_states' set states = ? where id = ?)",(tg_id,states,))
        return self.conn.commit(),
        print("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    def delete_records(self,tg_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã"""
        self.cursor.execute("Delete FROM user_states WHERE tg_id='Oleynikov Vitaly Sergeevich';")
        return self.conn.commit()

    def close(self):
            """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
            self.conn.close()


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


bot = Bot(token="5282844089:AAHh_Ou1dwd5A4dtztuqTUVJLvcz6lT8QxI")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot, storage = MemoryStorage())
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
for i in range (0, len(TestStates.all())):
    print(TestStates.all()[i])

async def get_current_state(user_id):

    try:
        for name in STATES:
            if name.value == user_id:
                return name.value
                break
    except KeyError:  # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å
        return STATES.S_START.value


async def set_state(user_id, value):
    global current_user_state
    try:
        current_user_state = value
        return True
    except Exception as E:

        return False




async def send_message(telebot_client, chat_id, text):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    client - –∫–ª–∏–µ–Ω—Ç –±–æ—Ç–∞
    chat_id - —á–∞—Ç, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    '''
    telebot_client.send_message(chat_id, text, parse_mode = 'HTML')


@dp.callback_query_handler(Text(startswith='test_'), state=TestStates.S_GET_INFO[0])
async def calll(call:types.CallbackQuery):
    res = call.data.split('_')[1]
    state = dp.current_state(user=call.from_user.id)
    dict = await state.get_data()
    print(dict, res)
    try:
        if call.message:
            if dict['authentificated']:
                # keyboard (–†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º)
                if res == '1':
                    await call.message.answer('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞...')
                elif  res =='2':
                    await call.message.answer('*–í–ª–∞–∂–Ω–æ—Å—Ç—å...*')
                elif res =='3':
                    await call.message.answer('*–í–æ–∑–¥—É—Ö...*')
                elif res =='4':
                    await call.message.answer('*–ö–æ–ª-–≤–æ...*')
                elif res =='5':
                    response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
                    response1 = requests.get("https://api.coindesk.com/v1/bpi/currentprice.json")

                    if response.status_code == 200:
                        content = response.json()
                        content1 = response1.json()
                        await call.message.answer(
                                           '–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: ' + str(content["Valute"]["USD"]['Value']) +
                                           '\n' + '–ö—É—Ä—Å –µ–≤—Ä–æ: ' + str(
                                               content["Valute"]["EUR"]['Value']) + '\n–ö—É—Ä—Å Bitcoin: ' +
                                           str(content1['bpi']['USD']['rate_float']))
                elif res =='6':
                    s = requests.get('http://anekdotme.ru/random')
                    b = bs4.BeautifulSoup(s.text, "html.parser")
                    p = b.select('.anekdot_text')
                    for x in p:
                        s = (x.getText().strip())
                        await call.message.answer( s)
                        break
                elif res =='7':
                    response = requests.get("https://beer-501.herokuapp.com/beer/getAll")
                    print(response)
                    if response.status_code == 200:
                        content = response.json()
                        print(content)

                        for elem in content:
                            s = ''
                            s += str(elem['name_beer']) + ' - '
                            s += str(elem['value_beer']) + ' –ª' + '\n'
                            await call.message.answer(s)
            else:
                await call.message.answer('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    except Exception as E:
        print(E)


@dp.message_handler(commands=["start"], state="*")
async def start(message: types.Message):
 #   tg_id = BotDB.get_user_id(tg_id='@...')
   # if tg_id["tg_id"] != 'left':
   #         await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}üëãüèª \n...'.format(message.from_user)),
   # else:
    #          await bot.send_message(message.from_user.id, '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!')
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[0])
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/help")
    item2 = types.KeyboardButton("/login")
    item3 = types.KeyboardButton("/info")
    item4 = types.KeyboardButton("/reset")
    markup.add(item1, item2, item3, item4)
    await message.reply('–•–∞–π', parse_mode='html', reply_markup = markup)

    #set_state(current_user_id, 1)


# –ü–æ –∫–æ–º–∞–Ω–¥–µ /reset –±—É–¥–µ–º —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –∫ –Ω–∞—á–∞–ª—É –¥–∏–∞–ª–æ–≥–∞
@dp.message_handler(commands=["reset"], state="*")
async def cmd_reset(message):
    # States
    #BotDB.add_record('0',states)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/help")
    item2 = types.KeyboardButton("/login")
    item3 = types.KeyboardButton("/info")
    item4 = types.KeyboardButton("/reset")
    markup.add(item1, item2, item3, item4)
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[0])
    await message.reply("–ù–∞—á–Ω—ë–º –ø–æ –Ω–æ–≤–æ–π", reply_markup=markup)



@dp.message_handler(commands=["help"], state="*")
async def cmd_reset(message):
    current_chat_id = message.chat.id

    await message.reply("–ö–æ–º–∞–Ω–¥—ã:\n1./login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n2. /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n3. "
                                          "/reset - –≤–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n4. "
                                          "/info - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")

@dp.message_handler(commands=["info"], state="*")
async def cmd_reset(message:types.Message):
    state = dp.current_state(user=message.from_user.id)
    dict = state.get_data()
    print(dict)
    if dict['authenthificated']:
        await message.reply(text='–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏–≤–Ω–æ–π –ª–∞–≤–∫–æ–π. '
                                 '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
        markup1 = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton(text="–î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", callback_data='test_1')
        item2 = types.InlineKeyboardButton(text="–î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏", callback_data='test_2')
        item3 = types.InlineKeyboardButton(text="–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞", callback_data='test_3')
        item4 = types.InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π ", callback_data='test_4')
        item5 = types.InlineKeyboardButton(text="–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ ", callback_data='test_5')
        item6 = types.InlineKeyboardButton(text="–ê–Ω–µ–∫–¥–æ—Ç", callback_data='test_6')
        item7 = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–∏–≤–∞", callback_data='test_7')
        #
        markup1.add(item1, item2, item3, item4, item5, item6,item7)
        #
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:',
                            parse_mode='html', reply_markup=markup1)
    else:
        await message.reply(
                     '–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏–≤–Ω–æ–π –ª–∞–≤–∫–æ–π. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.'
                     ' –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É "/login" –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.')


@dp.message_handler(state=TestStates.S_ENTER_LOGIN)
async def user_entering_name(message: types.Message):
    print('1')

    state = dp.current_state(user=message.from_user.id)
    print('2')
   # print(state.get_state())
    await state.update_data(login=message.text.lower())
    await state.set_state(TestStates.all()[2])
    await message.reply("–õ–æ–≥–∏–Ω –ø–æ–ª—É—á–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")


@dp.message_handler(state=TestStates.S_ENTER_PASS[0])
async def user_entering_pass(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.update_data(passwd=message.text.lower())
    dict = await state.get_data()
    print(dict)
    login = dict['login']
    passwd = dict['passwd']
    # –í —Å–ª—É—á–∞–µ —Å –∏–º–µ–Ω–µ–º –Ω–µ –±—É–¥–µ–º –Ω–∏—á–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –ø—É—Å—Ç—å —Ö–æ—Ç—å "25671", —Ö–æ—Ç—å –ï–≤–∫–∞–∫–∏–π
    await message.reply("–ü—Ä–∏–Ω—è—Ç–æ, –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    if checkAccess(login, passwd):
        await message.reply('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')

        await state.update_data(authentificated=True)
        print(await state.get_data())
        print(TestStates.all()[3])
        await state.set_state(TestStates.all()[3])
        markup1 = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton(text="–î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", callback_data='test_1')
        item2 = types.InlineKeyboardButton(text="–î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏", callback_data='test_2')
        item3 = types.InlineKeyboardButton(text="–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞", callback_data='test_3')
        item4 = types.InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π ", callback_data='test_4')
        item5 = types.InlineKeyboardButton(text="–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ ", callback_data='test_5')
        item6 = types.InlineKeyboardButton(text="–ê–Ω–µ–∫–¥–æ—Ç", callback_data='test_6')
        item7 = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–∏–≤–∞", callback_data='test_7')
        #
        markup1.add(item1, item2, item3, item4, item5, item6, item7)
        #
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:',
                            parse_mode='html', reply_markup=markup1)
        # States
        # BotDB.add_record('3', states)
    else:
        await message.reply('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω.')
        await state.set_state(TestStates.all()[1])
        # States
        # BotDB.add_record('1', states)


@dp.message_handler(commands=["login"], state = '*')
async def cmd_reset(message:types.Message):
   # BotDB.add_record('1')
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[1])
    await message.reply( '–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')




#def main():

    #bot.infinity_polling( interval=0)



#if __name__ == '__main__':
 #   try:
  #      main()
   # except Exception as E:
   #     print(E)


if __name__ == "__main__":
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        executor.start_polling(dp, skip_updates=True, on_shutdown=shutdown)
    except Exception as E:
        print(E)